int32_t temp2 = N; //copy of parameter N, in decimal form
    char output[numBits + 1];
    //converting to twos comp from decimal
    for (int i = numBits-1; i>= 0; i--){
        int c = temp2>>1 & 1;
        temp2 =temp2>>1;
        output[i] = c + '0';
    }
    output[numBits] = '\0';
    printf("Twos Comp (binary operator): %s\n", output);


    /* 
        //printf ("%d\n", i);
        //printf ("N: %d\n", temp2);
        //printf ("bit: %d\n\n", c);
    */

    /**************************************/

    /*
    //printf ("Twos Comp: %s\n",twoscomp);
    //now that we have twos complement, we need to fill in the cache
    for (int i = 0; i < numBits; i++){
        cache[i][0]= twoscomp[i]; //bit
        if (cache[i][0] == '1'){
            if (cache[i][2] == '\0'){ //if cache is null
                cache[i][2] = cache[i][0];
            }
        }
        else cache[i][2] = cache[i][0];
    }
    */
    /**************************************/
    /*
    printf ("\n\n\nCache:\n\n");
    printf("Bits: ");
    for (int i = 0; i < numBits; i++){
        printf("%c ", cache[i][0]);
    }
    printf("\nPos: ");
    for (int i = 0; i < numBits; i++){
        printf("%d ", cache[i][1]);
    }
    printf("\nOut: ");
    for (int i = 0; i < numBits; i++){
        printf("%c ", cache[i][2]);
    }
    */

    /*
    for (int i = 0; i < numBits; i++){
        if(i%4 == 0 &&  i!=0){
            printf(" ");
        }
        printf("%c", cache[i][2]);
    }
    */

    -----
    //converts binary -> one's comp -> two's comp
    //apparently, I don't need this code because bitString is already in two's complement form
    /*
    //convert Binary bitString to one's complement
    char onescomp[numBits +1];
    for (int i = 0; i < numBits; i++){
        if (bitString[numBits -1 -i] == '1'){
            onescomp[numBits -1 -i] = '0';
        }
        else if (bitString[numBits -1 -i] == '0'){
            onescomp[numBits -1 -i] = '1';
        }
    }
    onescomp[numBits] = '\0';
    printf ("Ones Comp: %s\n",onescomp);

    //convert two's complement to one's complement
    char twoscomp[numBits + 1];
    int carry = '0';
    for (int i = numBits -1; i >= 0; i--){
        char temp = '0';
        //adding 1 to lsb
        if (i == numBits - 1){
            temp = onescomp[i] + '1' - '0';
            if (temp == '2'){
                twoscomp[i] = '0';
                carry = '1';
            }
            else if (temp == '1'){
                twoscomp[i] = '1';
                carry = '0';
            }
        }
        else{//for all other bits
            if (carry == '1'){
                temp = onescomp[i] + carry - '0';
                if (temp == '2'){
                    twoscomp[i] = '0';
                    carry = '1';
                }
                else if (temp == '1'){
                    twoscomp[i] = '1';
                    carry = '0';
                }
                else if (temp == '0'){
                    twoscomp[i] = '0';
                    carry = '0';
                }
            }
            else{//carry == '0'
                twoscomp[i] = onescomp[i];
                carry ='0';
            }
        }
    }
    twoscomp[numBits] = '\0';
    printf("Twos Comp: %s\n", twoscomp);
    */